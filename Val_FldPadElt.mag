// TO ATTACH THIS FILE YOU MUST ALSO ATTACH
// - Promotion.mag
// - DefaultAssociativeArray.mag

///# Valuations
/// 
///toc
///
///## Introduction
///
/// In this package, we define new types to represent valuations of p-adic numbers and polynomials. These are also used to represent precisions.
/// 
/// The valuation of a p-adic number is represented by the type `Val_FldPadElt`, whose value is either an integer, or positive or negative infinity. Mathematically its values are in $Z := \ZZ \cup \{\pm\infty\}$. Addition of valuations corresponds to multiplications of p-adics, so we define this. On the other hand, multiplication of two valuations has no natural interpretation, so we do not define this. Taking the minimum of two valuations is defined, since this bounds the valuation of the sum of the corresponding p-adics. Hence $Z$ is more like the *tropical ring of integers* than the usual ring of integers $\ZZ$. Multiplying by an ordinary integer (*scalar multiplication*) is defined because this corresponds to exponentiation of p-adic numbers. They are also totally ordered. For convenience, we extend $Z$ to include the rationals $\QQ$ too.
/// 
/// The valuation of a polynomial is (by definition in the package) a function taking an exponent vector to the valuation of the corresponding coefficient. That is, for polynomials of rank $n$, it is a function $\NN^n \to Z^n$, i.e. an element of $Z^{\NN^n}$. They are represented by the type `Val_RngUPolElt_FldPad` for univariate polynomials and `Val_RngMPolElt_FldPad` for multivariate polynomials over p-adic fields. Since polynomials by definition have only finitely many non-zero coefficients, the function is constant except for finitely many inputs. We can define a partial ordering on these valuations: $v_1 < v_2$ iff for all $n \in \NN$ then $v_1(n) < v_2(n)$. This partial ordering gives us suprema and infema (defined pointwise), and we can also define addition and scalar multiplication pointwise.

///## Generic intrinsics
///
/// In this section we document intrinsics common to all valuations. Where there are multiple `Val` inputs, it suffices for only one to be a `Val` and for them all to be coercible to a common `Val` type.

/// Negation, addition and subtraction.
/// 
/// This is as normal for `Val_FldPadElt`, and defined pointwise otherwise. For convenience, we define $\infty-\infty=0$.
///~intrinsic '-'(v :: Val) -> Val {"} end intrinsic;
///~intrinsic '+'(v :: Val, w :: Val) -> Val {"} end intrinsic;
///~intrinsic '-'(v :: Val, w :: Val) -> Val {"} end intrinsic;

/// Scalar multiplication and division. `n` must be an integer or rational.
///~intrinsic '*'(v :: Val, n) -> Val {"} end intrinsic;
///~intrinsic '*'(n, v :: Val) -> Val {"} end intrinsic;
///~intrinsic '/'(v :: Val, n) -> Val {"} end intrinsic;

/// Ordering predicates.
/// 
/// This is as normal for `Val_FldPadElt` (i.e. a total ordering), and defined pointwise otherwise (i.e. a partial ordering).
///~intrinsic 'eq'(v :: Val, w :: Val) -> Val {"} end intrinsic;
///~intrinsic 'ne'(v :: Val, w :: Val) -> Val {"} end intrinsic;
///~intrinsic 'le'(v :: Val, w :: Val) -> Val {"} end intrinsic;
///~intrinsic 'lt'(v :: Val, w :: Val) -> Val {"} end intrinsic;
///~intrinsic 'ge'(v :: Val, w :: Val) -> Val {"} end intrinsic;
///~intrinsic 'gt'(v :: Val, w :: Val) -> Val {"} end intrinsic;

/// Supremum and infemum.
/// 
/// This is just maximum and minimum for `Val_FldPadElt`, and defined pointwise otherwise.
///~intrinsic 'join'(v :: Val, w :: Val) -> Val {"} end intrinsic;
///~intrinsic 'meet'(v :: Val, w :: Val) -> Val {"} end intrinsic;

/// Diff. For `Val_FldPadElt`, `v diff w` is defined to be `v` if `v gt w` and otherwise is negative infinity. Otherwise, it is defined pointwise.
/// 
/// If you view the valuation of a compound structure like a multiset, except where the multiplicities on each element are tropical integers instead of normal integers, then `diff` is like set difference defined via a universal property.
///~intrinsic 'diff'(v :: Val, w :: Val) -> Val {"} end intrinsic;

/// Retrieves the value of the valuation. For `Val_FldPadElt` this is an integer, rational or infinite. For compound structures it is the underlying function, e.g. for polynomials it is an `AssocDflt` representing a function which is constant almost everywhere.
///~intrinsic Value(v :: Val) -> . {"} end intrinsic;

/// True if `v` may be coerced to a valuation for `x`. If so, also returns the coerced valuation.
///~intrinsic IsValidAbsolutePrecision(x, v) -> Val {"} end intrinsic;

/// True if `v` may be coerced to a valuation for `x`. If so also returns the coerced valuation. Differs from `IsValidAbsolutePrecision` in that, for example, for polynomials, if the constant value is not implied by `v`, then it is taken to be -infinity instead of infinity.
///~intrinsic IsValidAbsolutePrecisionDiff(x, v) -> Val {"} end intrinsic;

///## Val_FldPadElt
/// Represents the valuation of a p-adic number.

import "ExactpAdics.mag": VAL, APR;
import "Promotion.mag": do_binop;

Z := Integers();
OO := Infinity();

// the valuation of a FldPadElt or FldPadExactElt or similar
declare type Val_FldPadElt: Val_PadExactElt;
declare attributes Val_FldPadElt
  : value            // REQ: FldRatElt, RngIntElt or Infty
  ;

VAL_FLDPADELT_INFINITY := New(Val_FldPadElt);
VAL_FLDPADELT_INFINITY`value := OO;

VAL_FLDPADELT_NEGINFINITY := New(Val_FldPadElt);
VAL_FLDPADELT_NEGINFINITY`value := -OO;

VAL_FLDPADELT_ZERO := New(Val_FldPadElt);
VAL_FLDPADELT_ZERO`value := 0;

///### Creation

intrinsic Val_FldPadElt_IsCoercible(v) -> BoolElt, .
  {True if v is coercible to a Val_FldPadElt, and the coerced value.}
  return false, "wrong type";
end intrinsic;

intrinsic Val_FldPadElt_IsCoercible(v :: Val_FldPadElt) -> BoolElt, .
  {"}
  return true, v;
end intrinsic;

intrinsic Val_FldPadElt_IsCoercible(v :: RngIntElt) -> BoolElt, .
  {"}
  r := New(Val_FldPadElt);
  r`value := v;
  return true, r;
end intrinsic;

intrinsic Val_FldPadElt_IsCoercible(v :: Infty) -> BoolElt, .
  {"}
  r := New(Val_FldPadElt);
  r`value := v;
  return true, r;
end intrinsic;

intrinsic Val_FldPadElt_IsCoercible(v :: ExtReElt) -> BoolElt, .
  {"}
  return Val_FldPadElt_IsCoercible(Retrieve(v));
end intrinsic;

intrinsic Val_FldPadElt_IsCoercible(v :: FldRatElt) -> BoolElt, .
  {"}
  r := New(Val_FldPadElt);
  r`value := v;
  return true, r;
end intrinsic;

intrinsic IsPromotable(v :: Val_FldPadElt, w) -> BoolElt, ., .
  {True if v and w are promotable to a common type.}
  ok, w2 := Val_FldPadElt_IsCoercible(w);
  if ok then
    return true, v, w2;
  end if;
  return false, _, _;
end intrinsic;

///hide
intrinsic IsValidAbsolutePrecision(x :: FldPadExactElt, v) -> BoolElt, .
  {True if v is coercible to an absolute precision for x. Also returns the coerced value.}
  return Val_FldPadElt_IsCoercible(v);
end intrinsic;

///hide
intrinsic IsValidAbsolutePrecisionDiff(x :: FldPadExactElt, v) -> BoolElt, .
  {True if v is coercible to an absolute precision diff for x. Also returns the coerced value.}
  return Val_FldPadElt_IsCoercible(v);
end intrinsic;

intrinsic Val_FldPadElt_Make(v) -> Val_FldPadElt
  {A Val_FldPadElt with value v.}
  ok, v := Val_FldPadElt_IsCoercible(v);
  require ok: v;
  return v;
end intrinsic;

///### Special values

intrinsic Val_FldPadElt_Infinity() -> Val_FldPadElt
  {The valuation Infinity.}
  return VAL_FLDPADELT_INFINITY;
end intrinsic;

intrinsic Val_FldPadElt_NegInfinity() -> Val_FldPadElt
  {The valuation -Infinity.}
  return VAL_FLDPADELT_NEGINFINITY;
end intrinsic;

intrinsic Val_FldPadElt_Zero() -> Val_FldPadElt
  {The valuation 0.}
  return VAL_FLDPADELT_ZERO;
end intrinsic;

///hide
intrinsic Print(v :: Val_FldPadElt, lvl :: MonStgElt)
  {Print.}
  case lvl:
  when "Magma":
    printf "Val_FldPadElt_Make(%m)", Value(v);
  else
    printf "%O", Value(v), lvl;
  end case;
end intrinsic;

///hide
intrinsic Value(v :: Val_FldPadElt) -> .
  {The value of v.}
  return v`value;
end intrinsic;

///### Other operations

intrinsic IsFinite(v :: Val_FldPadElt) -> BoolElt
  {True if v is finite, i.e. an integer or rational.}
  return Type(v`value) ne Infty;
end intrinsic;

intrinsic IsIntegral(v :: Val_FldPadElt) -> BoolElt, RngIntElt
  {True if v has an integer value, and the value if so.}
  return IsCoercible(Z, v`value);
end intrinsic;

intrinsic IntegerValue(v :: Val_FldPadElt) -> RngIntElt
  {The value of v coerced to an integer.}
  ok, n := IsIntegral(v);
  require ok: "must be an integer";
  return n;
end intrinsic;

intrinsic Ceiling(v :: Val_FldPadElt) -> Val_FldPadElt
  {The integer valuation larger than v, or just v if infinite.}
  return Val_FldPadElt_Make(Ceiling(Value(v)));
end intrinsic;

///hide
intrinsic '-'(v :: Val_FldPadElt) -> Val_FldPadElt
  {Negation.}
  return Val_FldPadElt_Make(-Value(v));
end intrinsic;

///hide
intrinsic '&+'(vs :: [Val_FldPadElt]) -> Val_FldPadElt
  {Summation.}
  w := &+[v`value : v in vs];
  return Val_FldPadElt_Make(Type(w) eq ExtReElt select Retrieve(w) else w);
end intrinsic;

///hide
intrinsic '+'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Addition.}
  return &+[v,w];
end intrinsic;

///hide
intrinsic '+'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '+'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '+'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '+'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '-'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Subtraction. Note that subtraction is interpreted as a "precision = absolute precision - valuation" calculation, so Infinity-Infinity is 0.}
  return Val_FldPadElt_Make(Value(v) eq Value(w) select 0 else Value(v) - Value(w));
end intrinsic;

///hide
intrinsic '-'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '-'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '-'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '-'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '*'(v :: Val_FldPadElt, w :: RngIntElt) -> Val_FldPadElt
  {Multiplication.}
  return Val_FldPadElt_Make(Value(v) * w);
end intrinsic;

///hide
intrinsic '*'(v :: Val_FldPadElt, w :: FldRatElt) -> Val_FldPadElt
  {"}
  return Val_FldPadElt_Make(Value(v) * w);
end intrinsic;

///hide
intrinsic '*'(v :: RngIntElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {"}
  return Val_FldPadElt_Make(v * Value(w));
end intrinsic;

///hide
intrinsic '*'(v :: FldRatElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {"}
  return Val_FldPadElt_Make(v * Value(w));
end intrinsic;

///hide
intrinsic '/'(v :: Val_FldPadElt, w :: RngIntElt) -> Val_FldPadElt
  {Division.}
  return Val_FldPadElt_Make(Value(v) / w);
end intrinsic;

///hide
intrinsic '/'(v :: Val_FldPadElt, w :: FldRatElt) -> Val_FldPadElt
  {"}
  return Val_FldPadElt_Make(Value(v) / w);
end intrinsic;

///hide
intrinsic 'join'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {The higher of v and w. Interpreted as an upper bound on two absolute precisions.}
  return v ge w select v else w;
end intrinsic;

///hide
intrinsic 'join'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'join'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'join'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'join'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {The lower of v and w. Interpreted as a lower bound on two valuations.}
  return v le w select v else w;
end intrinsic;

///hide
intrinsic 'meet'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {v if v is higher than w else -OO. Interpreted as the absolute precision required if v is wanted and w is already got.}
  return v gt w select v else VAL_FLDPADELT_NEGINFINITY;
end intrinsic;

///hide
intrinsic 'diff'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Equality.}
  return Value(v) eq Value(w);
end intrinsic;

///hide
intrinsic 'eq'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Inequality.}
  return Value(v) ne Value(w);
end intrinsic;

///hide
intrinsic 'ne'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'le'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Equality.}
  return Value(v) le Value(w);
end intrinsic;

///hide
intrinsic 'le'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'le'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'le'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'le'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Equality.}
  return Value(v) lt Value(w);
end intrinsic;

///hide
intrinsic 'lt'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Equality.}
  return Value(v) ge Value(w);
end intrinsic;

///hide
intrinsic 'ge'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v :: Val_FldPadElt, w :: Val_FldPadElt) -> Val_FldPadElt
  {Equality.}
  return Value(v) gt Value(w);
end intrinsic;

///hide
intrinsic 'gt'(v, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v:: Val_FldPadElt, w) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v :: Infty, w :: Val_FldPadElt) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v:: Val_FldPadElt, w :: Infty) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

intrinsic ExactpAdics_Val(x :: FldPadElt) -> Val_FldPadElt
  {The valuation of x.}
  return Val_FldPadElt(VAL(x));
end intrinsic;

intrinsic ExactpAdics_APr(x :: FldPadElt) -> Val_FldPadElt
  {The absolute precision of x.}
  return Val_FldPadElt_Make(APR(x));
end intrinsic;