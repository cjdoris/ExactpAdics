// TO ATTACH THIS FILE YOU MUST ALSO ATTACH:
// - Promotion.mag
// - DefaultAssociativeArray.mag
// - Val_FldPadElt.mag

///# Valuations
///## Val_RngMPolElt_FldPad
/// Represents the valuation of a multivariate polynomial over a p-adic field.

import "Promotion.mag": do_binop;
import "Val_FldPadElt.mag": VAL_FLDPADELT_INFINITY, VAL_FLDPADELT_NEGINFINITY, VAL_FLDPADELT_ZERO;

Z := Integers();

// the valuation of a RngMPolElt[FldPad], RngMPolElt_FldPadExact or similar
declare type Val_RngMPolElt_FldPad;
declare attributes Val_RngMPolElt_FldPad
  : values          // REQ: AssocDflt: [[RngIntElt]] -> Val_FldPadElt (valuation at each degree)
  ;

VAL_RNGMPOLELT_FLDPAD_INFINITY := New(Val_RngMPolElt_FldPad);
VAL_RNGMPOLELT_FLDPAD_INFINITY`values := DefaultAssociativeArray(VAL_FLDPADELT_INFINITY);

VAL_RNGMPOLELT_FLDPAD_NEGINFINITY := New(Val_RngMPolElt_FldPad);
VAL_RNGMPOLELT_FLDPAD_NEGINFINITY`values := DefaultAssociativeArray(VAL_FLDPADELT_NEGINFINITY);

VAL_RNGMPOLELT_FLDPAD_ZERO := New(Val_RngMPolElt_FldPad);
VAL_RNGMPOLELT_FLDPAD_ZERO`values := DefaultAssociativeArray(VAL_FLDPADELT_ZERO);

intrinsic Val_RngMPolElt_FldPad_IsCoercible(v) -> BoolElt, .
  {True if v is coercible to a Val_RngMPolElt_FldPad.}
  ok, v2 := Val_FldPadElt_IsCoercible(v);
  if ok then
    r := New(Val_RngMPolElt_FldPad);
    r`values := DefaultAssociativeArray(v2);
    return true, r;
  end if;
  return false, "wrong type";
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_IsCoercible(v :: Val_RngMPolElt_FldPad) -> BoolElt, .
  {"}
  return true, v;
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_IsCoercible(v :: AssocDflt) -> BoolElt, .
  {"}
  // check exact correctness first
  if Type(DefaultValue(v)) eq Val_FldPadElt and (#v`array eq 0 or Universe(v`array) cmpeq PowerSequence(Z)) and forall{k : k in Keys(v`array) | Type(v`array[k]) eq Val_FldPadElt} then
    r := New(Val_RngMPolElt_FldPad);
    r`values := v;
    return true, r;
  end if;
  // check coercibility
  ok, d := Val_FldPadElt_IsCoercible(DefaultValue(v));
  if not ok then
    return false, Sprintf("default value: %o", d);
  end if;
  ok, ks := CanChangeUniverse(SetToSequence(Keys(v`array)), PowerSequence(Z));
  if not ok then
    return false, "keys: expecting sequences of integers";
  end if;
  vs := [];
  for k in ks do
    ok, w := Val_FldPadElt_IsCoercible(v`array[k]);
    if not ok then
      return false, Sprintf("value %o: %o", k, w);
    end if;
    Append(~vs, w);
  end for;
  r := New(Val_RngMPolElt_FldPad);
  r`values := DefaultAssociativeArray(d, ks, vs);
  return true, r;
end intrinsic;

intrinsic IsPromotable(v :: Val_RngMPolElt_FldPad, w) -> BoolElt, .
  {True if v and w are promotable to a common type.}
  ok, w2 := Val_RngMPolElt_FldPad_IsCoercible(w);
  if ok then
    return true, v, w2;
  end if;
  return false, _, _;
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_IsCoercible(dflt, v) -> BoolElt, .
  {True if v is coercible to a Val_RngMPolElt_FldPad with given default.}
  ok, d := Val_FldPadElt_IsCoercible(dflt);
  if not ok then
    return false, "default not coercible: " cat d;
  end if;
  return Val_RngMPolElt_FldPad_IsCoercible(d, v);
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_IsCoercible(dflt :: Val_FldPadElt, v) -> BoolElt, .
  {"}
  reasons := {"wrong type"};
  ok := true;
  print "WARNING: Val_RngMPolElt_FldPad_IsCoercible: try";
  try
    x := DefaultAssociativeArray(dflt, v);
  catch err
    ok := false;
  end try;
  if ok then
    ok, w := Val_RngMPolElt_FldPad_IsCoercible(x);
    if ok then
      return true, w;
    else
      Include(~reasons, w);
    end if;
  end if;
  ok, w := Val_RngMPolElt_FldPad_IsCoercible(v);
  if ok and DefaultValue(Value(w)) eq dflt then
    return true, w;
  elif ok then
    Include(~reasons, "wrong default");
  end if;
  return false, Join(SetToSequence(reasons), " or ");
end intrinsic;

intrinsic IsValidAbsolutePrecision(x :: RngMPolElt_FldPadExact, v) -> BoolElt, .
  {True if v is coercible to an absolute precision for x. Also returns the coerced value.}
  reasons := {};
  ok, w := Val_RngMPolElt_FldPad_IsCoercible(VAL_FLDPADELT_INFINITY, v);
  if ok then
    return true, w;
  else
    Include(~reasons, w);
  end if;
  ok, w := Val_RngMPolElt_FldPad_IsCoercible(v);
  if ok then
    return true, w;
  else
    Include(~reasons, w);
  end if;
  return false, Join(SetToSequence(reasons), " or ");
end intrinsic;

intrinsic IsValidAbsolutePrecisionDiff(x :: RngMPolElt_FldPadExact, v) -> BoolElt, .
  {True if v is coercible to an absolute precision diff for x. Also returns the coerced value.}
  reasons := {};
  ok, w := Val_RngMPolElt_FldPad_IsCoercible(VAL_FLDPADELT_NEGINFINITY, v);
  if ok then
    return true, w;
  else
    Include(~reasons, w);
  end if;
  ok, w := Val_RngMPolElt_FldPad_IsCoercible(v);
  if ok then
    return true, w;
  else
    Include(~reasons, w);
  end if;
  return false, Join(SetToSequence(reasons), " or ");
end intrinsic;

intrinsic IsValidRelativePrecision(x :: RngMPolElt_FldPadExact, v) -> BoolElt, .
  {True if v is coercible to a relative precision for x. Also returns the coerced value.}
  reasons := {};
  ok, w := Val_RngMPolElt_FldPad_IsCoercible(VAL_FLDPADELT_ZERO, v);
  if ok then
    return true, w;
  else
    Include(~reasons, w);
  end if;
  ok, w := Val_RngMPolElt_FldPad_IsCoercible(v);
  if ok then
    return true, w;
  else
    Include(~reasons, w);
  end if;
  return false, Join(SetToSequence(reasons), " or ");
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_Make(v) -> Val_RngMPolElt_FldPad
  {A Val_RngMPolElt_FldPad with value v.}
  ok, v := Val_RngMPolElt_FldPad_IsCoercible(v);
  require ok: v;
  return v;
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_Make(x, y) -> Val_RngMPolElt_FldPad
  {Same as Val_RngMPolElt_FldPad_Make(DefaultAssociativeArray(x,y)).}
  return Val_RngMPolElt_FldPad_Make(DefaultAssociativeArray(x,y));
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_Make(x, y, z) -> Val_RngMPolElt_FldPad
  {Same as Val_RngMPolElt_FldPad_Make(DefaultAssociativeArray(x,y,z)).}
  return Val_RngMPolElt_FldPad_Make(DefaultAssociativeArray(x,y,z));
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_Infinity() -> Val_RngMPolElt_FldPad
  {The valuation Infinity.}
  return VAL_RNGMPOLELT_FLDPAD_INFINITY;
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_NegInfinity() -> Val_RngMPolElt_FldPad
  {The valuation -Infinity.}
  return VAL_RNGMPOLELT_FLDPAD_NEGINFINITY;
end intrinsic;

intrinsic Val_RngMPolElt_FldPad_Zero() -> Val_RngMPolElt_FldPad
  {The valuation 0.}
  return VAL_RNGMPOLELT_FLDPAD_ZERO;
end intrinsic;

///hide
intrinsic Print(v :: Val_RngMPolElt_FldPad, lvl :: MonStgElt)
  {Print.}
  case lvl:
  when "Magma":
    printf "Val_RngMPol_FldPad_Make(%m)", Value(v);
  else
    printf "%O", DefaultValue(Value(v)), lvl;
    x := SpecialAssociativeArray(Value(v));
    if #x gt 0 then
      printf " except (%o)", Join([Sprintf("%O->%O", k, lvl, x[k], lvl) : k in Keys(x)], ", ");
    end if;
  end case;
end intrinsic;

///hide
intrinsic Value(v :: Val_RngMPolElt_FldPad) -> AssocDflt
  {The underlying associative array of values.}
  return v`values;
end intrinsic;

intrinsic Ceiling(v :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {The integer valuation larger than v, or just v if infinite.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise(Ceiling, Value(v)));
end intrinsic;

///hide
intrinsic '-'(v :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {Negation.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise('-', Value(v)));
end intrinsic;

///hide
intrinsic '&+'(vs :: [Val_RngMPolElt_FldPad]) -> Val_RngMPolElt_FldPad
  {Sum.}
  return Val_RngMPolElt_FldPad_Make(ZipApplyPointwise('&+', [Value(v) : v in vs]));
end intrinsic;

///hide
intrinsic '+'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {Add.}
  return &+[v,w];
end intrinsic;

///hide
intrinsic '+'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '+'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '+'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '+'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('+', v, w);
end intrinsic;

///hide
intrinsic '-'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {Subtract.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise('-', Value(v), Value(w)));
end intrinsic;

///hide
intrinsic '-'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '-'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '-'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '-'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('-', v, w);
end intrinsic;

///hide
intrinsic '*'(v :: Val_RngMPolElt_FldPad, w :: RngIntElt) -> Val_RngMPolElt_FldPad
  {Multiply.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise(func<u | u*w>, Value(v)));
end intrinsic;

///hide
intrinsic '*'(v :: Val_RngMPolElt_FldPad, w :: FldRatElt) -> Val_RngMPolElt_FldPad
  {"}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise(func<u | u*w>, Value(v)));
end intrinsic;

///hide
intrinsic '*'(v :: RngIntElt, w :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {"}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise(func<u | v*u>, Value(w)));
end intrinsic;

///hide
intrinsic '*'(v :: FldRatElt, w :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {"}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise(func<u | v*u>, Value(w)));
end intrinsic;

///hide
intrinsic '/'(v :: Val_RngMPolElt_FldPad, w :: RngIntElt) -> Val_RngMPolElt_FldPad
  {Divide.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise(func<u | u/w>, Value(v)));
end intrinsic;

///hide
intrinsic '/'(v :: Val_RngMPolElt_FldPad, w :: FldRatElt) -> Val_RngMPolElt_FldPad
  {"}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise(func<u | u/w>, Value(v)));
end intrinsic;

///hide
intrinsic 'join'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {The smallest u with u ge v and u ge w. That is, pointwise join.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise('join', Value(v), Value(w)));
end intrinsic;

///hide
intrinsic 'join'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'join'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'join'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'join'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('join', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {The largest u with u le v and u le w. That is, pointwise meet.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise('meet', Value(v), Value(w)));
end intrinsic;

///hide
intrinsic 'meet'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'meet'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('meet', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> Val_RngMPolElt_FldPad
  {v wherever v is larger than w, and -OO elsewhere. That is, pointwise diff.}
  return Val_RngMPolElt_FldPad_Make(ApplyPointwise('diff', Value(v), Value(w)));
end intrinsic;

///hide
intrinsic 'diff'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'diff'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('diff', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> BoolElt
  {Equality.}
  return ForAll(Value(v), Value(w), 'eq');
end intrinsic;

///hide
intrinsic 'eq'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'eq'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('eq', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> BoolElt
  {Inequality.}
  return not (v eq w);
end intrinsic;

///hide
intrinsic 'ne'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'ne'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('ne', v, w);
end intrinsic;

///hide
intrinsic 'le'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> BoolElt
  {Test if v is less than or equal to w everywhere. That is, pointwise 'le'.}
  return ForAll(Value(v), Value(w), 'le');
end intrinsic;

///hide
intrinsic 'le'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'le'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'le'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'le'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('le', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> BoolElt
  {Test if v is less than w everywhere. That is, pointwise 'lt'.}
  return (v le w) and (v ne w);
end intrinsic;

///hide
intrinsic 'lt'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'lt'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('lt', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> BoolElt
  {Test if v is greater than or equal to w everywhere. That is, pointwise 'ge'.}
  return ForAll(Value(v), Value(w), 'ge');
end intrinsic;

///hide
intrinsic 'ge'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'ge'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('ge', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v :: Val_RngMPolElt_FldPad, w :: Val_RngMPolElt_FldPad) -> BoolElt
  {Test if v is greater than w everywhere. That is, pointwise 'gt'.}
  return (v ge w) and (v ne w);
end intrinsic;

///hide
intrinsic 'gt'(v :: Val_RngMPolElt_FldPad, w) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v :: Val_RngMPolElt_FldPad, w :: Infty) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

///hide
intrinsic 'gt'(v :: Infty, w :: Val_RngMPolElt_FldPad) -> .
  {"}
  return do_binop('gt', v, w);
end intrinsic;

intrinsic '&join'(v :: Val_RngMPolElt_FldPad) -> Val_FldPadElt
  {The join of the valuations at each coefficient. Equivalent to "&join Image(Value(v))".}
  return &join Image(Value(v));
end intrinsic;

intrinsic '&meet'(v :: Val_RngMPolElt_FldPad) -> Val_FldPadElt
  {The meet of the valuations at each coefficient. Equivalent to "&meet Image(Value(v))".}
  return &meet Image(Value(v));
end intrinsic;

intrinsic '@'(i :: [RngIntElt], v :: Val_RngMPolElt_FldPad) -> Val_FldPadElt
  {The valuation of coefficient i.}
  return Value(v)(i);
end intrinsic;

intrinsic '@'(m :: RngMPolElt, v :: Val_RngMPolElt_FldPad) -> Val_FldPadElt
  {The valuation of coefficient Exponents(m).}
  return Value(v)(Exponents(m));
end intrinsic;

function scalar_product(x, y)
  assert #x eq #y;
  return &+[x[i] * y[i] : i in [1..#x]];
end function;

intrinsic ShiftSlope(v :: Val_RngMPolElt_FldPad, s :: []) -> Val_RngMPolElt_FldPad
  {Adds i.s onto v(i).}
  s := [Val_FldPadElt_Make(v) : v in s];
  a := v`values;
  require Type(a`dflt`value) eq Infty: "The constant part of argument 1 must be infinite";
  ks := SetToSequence(Keys(a`array));
  return Val_RngMPolElt_FldPad_Make(a`dflt, ks, [a`array[k] + scalar_product(s, k) : k in ks]);
end intrinsic;